/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package service;

import java.awt.List;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import library.Mail;
import static library.Mail_Library.GetMailsString;
import static library.Mail_Library.OuvrirBoitePop3;
import static library.Mail_Library.getMails;

/**
 *
 * @author fredm
 */
public class Boite extends javax.swing.JFrame {

    /**
     * Creates new form Boite
     */
    private String host;
    private String user;
    private String pass;
    private ArrayList<Object> listMails;
    
    public Boite() {
        initComponents();
        //String mails = OuvrirBoitePop3("localhost", "info@test.com", "user");
        String mails = GetMailsString("localhost", "info@test.com", "user");
        AjoutMailsToList(mails);
    }
    public Boite(String h, String u, String p) {
        initComponents();
        host = h;
        user = u;
        pass = p;
        //String mails = GetMailsString(host, user ,pass);
        //AjoutMailsToList(mails);
        ArrayList<Object> listMails = getMails(h, u, p);
        ListToFields(listMails);
        BoiteListener boite = new BoiteListener(h, u, p, LMails, listMails, this);
        boite.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        LMails = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        BActu = new javax.swing.JButton();
        BOuvrir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LMails.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(LMails);

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Boite Mail");

        BActu.setText("Actualiser");
        BActu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActuActionPerformed(evt);
            }
        });

        BOuvrir.setText("Ouvrir");
        BOuvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOuvrirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(52, 52, 52)
                .addComponent(BActu)
                .addGap(18, 18, 18)
                .addComponent(BOuvrir)
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BOuvrir)
                            .addComponent(BActu)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BActuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActuActionPerformed
        // TODO add your handling code here:
        //String mails = GetMailsString("localhost", "info@test.com", "user");
        //AjoutMailsToList(mails);
        ArrayList<Object> listMails = getMails(host, user, pass);
        ListToFields(listMails);
    }//GEN-LAST:event_BActuActionPerformed

    private void BOuvrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOuvrirActionPerformed
        // TODO add your handling code here:
        for(int i=0; i<listMails.size(); i++)
        {
            System.out.println(LMails.getSelectedValue().toString() + " et " + listMails.get(i).toString());
            if(LMails.getSelectedValue().toString().equals(listMails.get(i).toString()))
            {
                MailDisplay md = new MailDisplay((Mail) listMails.get(i));
                md.setVisible(true);
            }
        }
    }//GEN-LAST:event_BOuvrirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Boite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Boite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Boite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Boite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Boite().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BActu;
    private javax.swing.JButton BOuvrir;
    private javax.swing.JList LMails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void AjoutMailsToList(String mails) {
        if(mails != null)
        {
            System.out.println(mails);
            Vector vect_sujet = new Vector();
            Vector vect_exp = new Vector();
            Vector vect_jlist = new Vector();
            StringTokenizer parser = new StringTokenizer(mails, "#");
            while(parser.hasMoreTokens())
            {
                StringTokenizer par = new StringTokenizer(parser.nextToken(), "|");
                Vector temp = new Vector();
                while(par.hasMoreTokens())
                {
                    temp.add(par.nextToken());
                    //System.out.println(temp.toString());
                }
                vect_sujet.add(temp.get(0));
                vect_exp.add(temp.get((1)));
                vect_jlist.add(temp.get(1) + "      "+ temp.get(0));
            }
            LMails.setListData(vect_jlist);   
        }
        //BoiteListener boite = new BoiteListener("localhost", LMails);
        //boite.start();
    }

    public void ListToFields(ArrayList<Object> listMails) {
        
        this.listMails = listMails;
        Vector<String> listString = MailsToString(listMails);
        LMails.setListData(listString);
        
    }

    private Vector<String> MailsToString(ArrayList<Object> listMails) {
        Vector<String> vect = new Vector();
        for(int i=0; i< listMails.size(); i++)
        {
            vect.add(listMails.get(i).toString());
        }
        return vect;
    }
    public void setListMails(ArrayList<Object> listM)
    {
        this.listMails = listM;
    }

}
